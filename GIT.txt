GIT 
- It is a version control system (VCS)
- Allows multiple people to work on the code, so multiple contribution, different people can work on the same code and push the results later 
- Safe storage of code in case of hardware crash / system failure 
- manage and maintain different versions of the same piece of software ( branching) 
- Version tracking , you can revert to previous versions of the code 
- git is by far the best vcs


-Understand the difference between pull request and push request 

- git clone - used to create a local copy of the code by downloading the repo from cloud to the machine 

- git status - gives you details of any new changes made or files added 

- git log - gives you the history of all the commits, who and when the commit was done . 

If you want to add the changes to the git cloud first thing you need to do is:

	- git add "filename" : bring the changes to the staging area 
	- git commit -m "Message" : commit to the changes,write the message indicating what chagnes have you made
	- git push : after commit push the changes made to the local copy to the cloud git repo

What if you want to revert the changes in your code ? 
	- There is a command called git checkout -- filename, which can undo the changes made to the file at that point in Time
	- you can revert back to the changes as follows:
		- git log : gives you history of previous commits 
		- take any commit ID
		- do git revert -n commitID and then push  
Let's try it out 

Branches in GIT:
	-creating branches for more than one version of the project / code 
	- we do experimentation on one file 
	- git allows to two branches of code, were you can do experimentation and parallel development of the code 
	- (master) is a default branch in git 
	
Commands related to branching:
	git branch: lists all the branches in git 
	git branch 'branchname': create a new branch with name branchname
	git checkout 'branchname': switch to another branch 
	go to main branch and do git merge branchname to merge second  branch with main branch
	git branch -d branchname : delete the branch 
	git checkout -b branchname : create new branch and make it active

HEAD in git: 
	-it is a reference to the most recent commit in git most of the times 
	- git show HEAD : shows you the head commit 
	- git difftool old commit new commit
	- git difftool HEAD~i HEAD  : shows difference between older commit and newer commit HEAD~1 one older commit than newer commit
	- HEAD is said to detached if it's not pointing to recent commit , like when you do git checkout commitID , you will have detached head
.gitignore:
	- create one file and add all the files you want to ignore 
	- next time while doing git status , it wont show those files 
	- very helpful to deal with annoying files tha tyou dont bother 
